"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@ant-basement/errors");
const constant_1 = require("../constant");
function ruleOfField(_, value) {
    function validateField(name) {
        if (/[\.\$]/.test(name)) {
            return constant_1.MESSAGES.ILLEGAL;
        }
    }
    if (Array.isArray(value)) {
        return undefined;
    }
    if (typeof value === 'string') {
        return validateField(value);
    }
    let result = null;
    for (const key of Object.keys(value)) {
        result = validateField(key);
        if (typeof result === 'string') {
            return result;
        }
        if (typeof value[key] === 'object') {
            return ruleOfField(_, value[key]);
        }
    }
    if (result === null) {
        return constant_1.MESSAGES.INVALID_TYPE;
    }
}
exports.ruleOfField = ruleOfField;
function ruleOfFields(_, value) {
    if (!Array.isArray(value)) {
        return constant_1.MESSAGES.NOT_ARRAY;
    }
    let err;
    let i = 0;
    while (!err && i < value.length) {
        err = ruleOfField(null, value[i]);
        i++;
    }
    return err;
}
exports.ruleOfFields = ruleOfFields;
function ruleOfDatabaseName(_, value) {
    if (typeof value !== 'string') {
        return constant_1.MESSAGES.NOT_STRING;
    }
    if (value.trim().length === 0) {
        return constant_1.MESSAGES.NOT_EMPTY;
    }
    if (value.length > constant_1.MAX_DB_NAME_LENGTH) {
        return constant_1.MESSAGES.TOO_LONG;
    }
    if (/[\/\\\.\ \"\$]/.test(value)) {
        return constant_1.MESSAGES.ILLEGAL;
    }
    if (constant_1.INVALID_DB_NAMES.indexOf(value) > -1) {
        return constant_1.MESSAGES.SYSTEM;
    }
}
exports.ruleOfDatabaseName = ruleOfDatabaseName;
function ruleOfCollectionName(_, value) {
    if (typeof value !== 'string') {
        return constant_1.MESSAGES.NOT_STRING;
    }
    if (value.trim().length === 0) {
        return constant_1.MESSAGES.NOT_EMPTY;
    }
    if (value.length > constant_1.MAX_ID_NAME_LENGTH) {
        return constant_1.MESSAGES.TOO_LONG;
    }
    if (value.indexOf('$') > -1) {
        return constant_1.MESSAGES.ILLEGAL;
    }
    if (value.startsWith('system.')) {
        return constant_1.MESSAGES.ILLEGAL;
    }
    if (!/^[_a-z]/i.test(value)) {
        return constant_1.MESSAGES.ILLEGAL;
    }
}
exports.ruleOfCollectionName = ruleOfCollectionName;
const validator = new errors_1.Validator();
exports.validator = validator;
validator.addRule('field', ruleOfField);
validator.addRule('fields', ruleOfFields);
validator.addRule('databaseName', ruleOfDatabaseName);
validator.addRule('collectionName', ruleOfCollectionName);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidmFsaWRhdG9yLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL3V0aWxpdHkvdmFsaWRhdG9yLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBQUEsaURBQWlEO0FBQ2pELDBDQUFpRztBQVFqRyxxQkFBcUIsQ0FBQyxFQUFFLEtBQUs7SUFDM0IsdUJBQXVCLElBQVk7UUFDakMsSUFBSSxRQUFRLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ3ZCLE9BQU8sbUJBQVEsQ0FBQyxPQUFPLENBQUM7U0FDekI7SUFDSCxDQUFDO0lBRUQsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLEtBQUssQ0FBQyxFQUFFO1FBQ3hCLE9BQU8sU0FBUyxDQUFDO0tBQ2xCO0lBQ0QsSUFBSSxPQUFPLEtBQUssS0FBSyxRQUFRLEVBQUU7UUFDN0IsT0FBTyxhQUFhLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDN0I7SUFFRCxJQUFJLE1BQU0sR0FBOEIsSUFBSSxDQUFDO0lBQzdDLEtBQUssTUFBTSxHQUFHLElBQUksTUFBTSxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRTtRQUNwQyxNQUFNLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDO1FBRTVCLElBQUksT0FBTyxNQUFNLEtBQUssUUFBUSxFQUFFO1lBQzlCLE9BQU8sTUFBTSxDQUFDO1NBQ2Y7UUFDRCxJQUFJLE9BQU8sS0FBSyxDQUFDLEdBQUcsQ0FBQyxLQUFLLFFBQVEsRUFBRTtZQUNsQyxPQUFPLFdBQVcsQ0FBQyxDQUFDLEVBQUUsS0FBSyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7U0FDbkM7S0FDRjtJQUVELElBQUksTUFBTSxLQUFLLElBQUksRUFBRTtRQUNuQixPQUFPLG1CQUFRLENBQUMsWUFBWSxDQUFDO0tBQzlCO0FBQ0gsQ0FBQztBQStGbUIsa0NBQVc7QUF2Ri9CLHNCQUFzQixDQUFDLEVBQUUsS0FBSztJQUM1QixJQUFJLENBQUMsS0FBSyxDQUFD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