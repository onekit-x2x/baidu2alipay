"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const opMeta_1 = require("./opMeta");
const DATABASE_OP = {
    COLLECTIONS: {
        scope: opMeta_1.SCOPE.DATABASE,
        purpose: opMeta_1.PURPOSE.COLLECTION,
        operation: opMeta_1.OPERATION.READ,
    },
    CREATE_COLLECTION: {
        scope: opMeta_1.SCOPE.DATABASE,
        purpose: opMeta_1.PURPOSE.COLLECTION,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['name', 'collectionName'], ['options', 'object']]),
    },
    STATS: {
        scope: opMeta_1.SCOPE.DATABASE,
        purpose: opMeta_1.PURPOSE.ADMIN,
        operation: opMeta_1.OPERATION.READ,
    },
};
exports.DATABASE_OP = DATABASE_OP;
const COLLECTION_OP = {
    DROP: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.COLLECTION,
        operation: opMeta_1.OPERATION.WRITE,
    },
    RENAME: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.COLLECTION,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['newName', 'collectionName'], ['options', 'object']]),
    },
    CREATE_INDEX: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.INDEX,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['field', 'field'], ['options', 'object']]),
    },
    CREATE_INDEXES: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.INDEX,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['fields', 'array'], ['options', 'object']]),
    },
    LIST_INDEXES: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.INDEX,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([['options', 'object']]),
    },
    DROP_INDEX: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['indexName', 'field'], ['options', 'object']]),
    },
    DROP_INDEXES: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['options', 'object']]),
    },
    INSERT_ONE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['doc', 'field'], ['options', 'object']]),
    },
    INSERT_MANY: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['docs', 'array'], ['options', 'object']]),
    },
    FIND: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([
            [
                'query',
                {
                    type: 'object',
                    required: false,
                },
            ],
            ['options', 'object'],
        ]),
    },
    FIND_ONE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([['query', 'object'], ['options', 'object']]),
    },
    FIND_ONE_AND_UPDATE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['update', 'object'], ['options', 'object']]),
    },
    FIND_ONE_AND_REPLACE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['update', 'object'], ['options', 'object']]),
    },
    FIND_ONE_AND_DELETE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['options', 'object']]),
    },
    UPDATE_ONE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['update', 'object'], ['options', 'object']]),
    },
    UPDATE_MANY: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['update', 'object'], ['options', 'object']]),
    },
    REPLACE_ONE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['doc', 'object'], ['filter', 'object'], ['options', 'object']]),
    },
    DELETE_ONE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['options', 'object']]),
    },
    DELETE_MANY: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.WRITE,
        signature: new Map([['filter', 'object'], ['options', 'object']]),
    },
    COUNT: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([['query', 'object'], ['options', 'object']]),
    },
    DISTINCT: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([['key', 'string'], ['query', 'object'], ['options', 'object']]),
    },
    AGGREGATE: {
        scope: opMeta_1.SCOPE.COLLECTION,
        purpose: opMeta_1.PURPOSE.CRUD,
        operation: opMeta_1.OPERATION.READ,
        signature: new Map([['pipeline', 'object'], ['options', 'object']]),
    },
};
exports.COLLECTION_OP = COLLECTION_OP;
tslib_1.__exportStar(require("./opMeta"), exports);
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3BTcGVjLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vbGliL2NvbnN0YW50L29wU3BlYy50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7QUFBQSxxQ0FBcUQ7QUFZckQsTUFBTSxXQUFXLEdBQUc7SUFDbEIsV0FBVyxFQUFFO1FBQ1gsS0FBSyxFQUFFLGNBQUssQ0FBQyxRQUFRO1FBQ3JCLE9BQU8sRUFBRSxnQkFBTyxDQUFDLFVBQVU7UUFDM0IsU0FBUyxFQUFFLGtCQUFTLENBQUMsSUFBSTtLQUMxQjtJQUNELGlCQUFpQixFQUFFO1FBQ2pCLEtBQUssRUFBRSxjQUFLLENBQUMsUUFBUTtRQUNyQixPQUFPLEVBQUUsZ0JBQU8sQ0FBQyxVQUFVO1FBQzNCLFNBQVMsRUFBRSxrQkFBUyxDQUFDLEtBQUs7UUFDMUIsU0FBUyxFQUFFLElBQUksR0FBRyxDQUFDLENBQUMsQ0FBQyxNQUFNLEVBQUUsZ0JBQWdCLENBQUMsRUFBRSxDQUFDLFNBQVMsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDO0tBQ3hFO0lBQ0QsS0FBSyxFQUFFO1FBQ0wsS0FBSyxFQUFFLGNBQUssQ0FBQyxRQUFRO1FBQ3JCLE9BQU8sRUFBRSxnQkFBTyxDQUFDLEtBQUs7UUFDdEIsU0FBUyxFQUFFLGtCQUFTLENBQUMsSUFBSTtLQUMxQjtDQUNGLENBQUM7QUE2Sk8sa0NBQVc7QUEzSnBCLE1BQU0sYUFBYSxHQUFHO0lBR3BCLElBQUksRUFBRTtRQUNKLEtBQUssRUFBRSxjQUFLLENBQUMsVUFBVTtRQUN2QixPQUFPLEVBQUUsZ0JBQU8sQ0FBQyxVQUFVO1FBQzNCLFNBQVMsRUFBRSxrQkFBUyxDQUFDLEtBQUs7S0FDM0I7SUFDRCxNQUFNLEVBQUU7UUFDTixLQUFLLEVBQUUsY0FBSyxDQUFDLFVBQVU7UUFDdkIsT0FBTyxFQUFFLGdCQUFPLENBQUMsVUFBVTtRQUMzQixTQUFTLEVBQUUsa0JBQVMsQ0FBQyxLQUFLO1FBQzFCLFNBQVMsRUFBRSxJQUFJLEdBQUcs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