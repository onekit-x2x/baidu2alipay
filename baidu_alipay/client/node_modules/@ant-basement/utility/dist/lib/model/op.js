"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const errors_1 = require("@ant-basement/errors");
const specs_1 = require("./specs");
const utility_1 = require("../utility");
const constant_1 = require("../constant");
class Op {
    constructor(op, args = {}, options = {}) {
        if (!specs_1.OP_SPECS.hasOwnProperty(op)) {
            const error = new errors_1.ECODE.NotFoundError('命令');
            error.setErrors(op);
            throw error;
        }
        this.op = op;
        this.spec = specs_1.OP_SPECS[op];
        for (const key of Object.keys(args)) {
            if (args[key] === undefined) {
                delete args[key];
            }
        }
        if (!args.options) {
            args.options = {};
        }
        this.args = utility_1.js2json(args);
        this.collection = args.collection;
        this.validate(this.args, options);
        if (options.format) {
            this.format();
        }
    }
    format() {
        delete this.args.options.readPreference;
        delete this.args.options.collation;
        delete this.args.options.session;
        delete this.args.options.cursor;
        delete this.args.options.w;
        delete this.args.options.j;
        delete this.args.options.wtimeout;
        delete this.args.options.serializeFunctions;
        if (this.spec.purpose === constant_1.PURPOSE.INDEX) {
            this.args.options.background = true;
        }
        switch (this.op) {
            case specs_1.OP_SPECS.COUNT.name:
            case specs_1.OP_SPECS.FIND.name:
            case specs_1.OP_SPECS.FIND_ONE.name: {
                this.args.options.limit = Math.min(constant_1.LIMIT, this.args.options.limit || Number.MAX_SAFE_INTEGER);
                break;
            }
            case specs_1.OP_SPECS.AGGREGATE.name: {
                this.args.options.cursor = {
                    batchSize: constant_1.LIMIT,
                };
                break;
            }
            default:
        }
        switch (this.op) {
            case specs_1.OP_SPECS.FIND.name:
            case specs_1.OP_SPECS.FIND_ONE.name:
            case specs_1.OP_SPECS.FIND_ONE_AND_UPDATE.name:
            case specs_1.OP_SPECS.FIND_ONE_AND_DELETE.name:
            case specs_1.OP_SPECS.FIND_ONE_AND_REPLACE.name:
            case specs_1.OP_SPECS.COUNT.name:
            case specs_1.OP_SPECS.DISTINCT.name:
            case specs_1.OP_SPECS.AGGREGATE.name:
                this.args.options.maxTimeMS = constant_1.QUERY_TIMEOUT;
                break;
            case specs_1.OP_SPECS.DELETE_ONE.name:
            case specs_1.OP_SPECS.DELETE_MANY.name:
            case specs_1.OP_SPECS.INSERT_ONE.name:
            case specs_1.OP_SPECS.INSERT_MANY.name:
            case specs_1.OP_SPECS.REPLACE_ONE.name:
            case specs_1.OP_SPECS.UPDATE_ONE.name:
            case specs_1.OP_SPECS.UPDATE_MANY.name:
                this.args.options.wtimeout = constant_1.QUERY_TIMEOUT;
                break;
            default:
        }
    }
    validate(args, options = {
        format: false,
        allowAdmin: false,
    }) {
        if (this.spec.scope === constant_1.SCOPE.COLLECTION && !this.collection) {
            throw new errors_1.ECODE.ValidationError('没有 collection 字段');
        }
        if (this.spec.purpose === constant_1.PURPOSE.ADMIN && !options.allowAdmin) {
            throw new errors_1.ECODE.ValidationError('不允许执行管理指令');
        }
        const errors = utility_1.validator.validate(this.spec.schema, args);
        if (errors) {
            const error = new errors_1.ECODE.ValidationError();
            error.setErrors(errors);
            throw error;
        }
    }
    inspect() {
        const args = Object.assign({}, this.args, {
            command: this.op,
        });
        if (Object.keys(args.options).length === 0) {
            delete args.options;
        }
        if (this.collection) {
            args.collection = this.collection;
        }
        return args;
    }
    getParams() {
        return this.spec.keys.map(key => this.args[key]);
    }
    hasPrefetch() {
        return [specs_1.OP_SPECS.INSERT_ONE.name, specs_1.OP_SPECS.INSERT_MANY.name].indexOf(this.op) > -1;
    }
    getPrefetch() {
        switch (this.op) {
            case specs_1.OP_SPECS.INSERT_ONE.name: {
                return {
                    affectedDocs: 1,
                    result: this.args.doc,
                };
            }
            case specs_1.OP_SPECS.INSERT_MANY.name: {
                return {
                    affectedDocs: this.args.docs.length,
                    result: this.args.docs,
                };
            }
            default:
        }
    }
}
exports.default = Op;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoib3AuanMiLCJzb3VyY2VSb290IjoiIiwic291cmNlcyI6WyIuLi8uLi8uLi9saWIvbW9kZWwvb3AudHMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBNkM7QUFFN0MsbUNBQW1DO0FBQ25DLHdDQUFnRDtBQUNoRCwwQ0FBbUU7QUFHbkU7SUFNRSxZQUFZLEVBQVUsRUFBRSxPQUFZLEVBQUUsRUFBRSxVQUFxQixFQUFFO1FBRTdELElBQUksQ0FBQyxnQkFBUSxDQUFDLGNBQWMsQ0FBQyxFQUFFLENBQUMsRUFBRTtZQUNoQyxNQUFNLEtBQUssR0FBRyxJQUFJLGNBQUssQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLENBQUM7WUFDNUMsS0FBSyxDQUFDLFNBQVMsQ0FBQyxFQUFFLENBQUMsQ0FBQztZQUNwQixNQUFNLEtBQUssQ0FBQztTQUNiO1FBRUQsSUFBSSxDQUFDLEVBQUUsR0FBRyxFQUFFLENBQUM7UUFDYixJQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFRLENBQUMsRUFBRSxDQUFDLENBQUM7UUFHekIsS0FBSyxNQUFNLEdBQUcsSUFBSSxNQUFNLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxFQUFFO1lBQ25DLElBQUksSUFBSSxDQUFDLEdBQUcsQ0FBQyxLQUFLLFNBQVMsRUFBRTtnQkFDM0IsT0FBTyxJQUFJLENBQUMsR0FBRyxDQUFDLENBQUM7YUFDbEI7U0FDRjtRQUNELElBQUksQ0FBQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ2pCLElBQUksQ0FBQyxPQUFPLEdBQUcsRUFBRSxDQUFDO1NBQ25CO1FBR0QsSUFBSSxDQUFDLElBQUksR0FBRyxpQkFBTyxDQUFDLElBQUksQ0FBQyxDQUFDO1FBQzFCLElBQUksQ0FBQyxVQUFVLEdBQUcsSUFBSSxDQUFDLFVBQVUsQ0FBQztRQUNsQyxJQUFJLENBQUMsUUFBUSxDQUFDLElBQUksQ0FBQyxJQUFJLEVBQUUsT0FBTyxDQUFDLENBQUM7UUFFbEMsSUFBSSxPQUFPLENBQUMsTUFBTSxFQUFFO1lB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