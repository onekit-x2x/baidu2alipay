import { SCOPE, PURPOSE, OPERATION } from './constant';
export interface MongoResult {
    affectedDocs?: number;
    result?: any;
}
export interface RawOp {
    scope: SCOPE;
    purpose: PURPOSE;
    operation: OPERATION;
    signature?: Map<string, any>;
}
export interface OpDescriptor {
    name: string;
    keys: string[];
    scope: SCOPE;
    schema: object;
    purpose: PURPOSE;
    operation: OPERATION;
    signature: Map<string, any>;
}
export interface OpOptions {
    format?: boolean;
    allowAdmin?: boolean;
}
export interface RuntimeContext {
    [key: string]: object;
}
export declare class Op {
    op: string;
    args: any;
    constructor(op: string, args: any, options?: OpOptions);
    format(): void;
    validate(): void;
    getParams(): any[];
    hasPrefetch(): boolean;
    getPrefetch(): MongoResult;
}
export interface Db {
    collection(): Collection;
    collections(): Promise<MongoResult>;
    createCollection(name: string, options?: object): Promise<MongoResult>;
}
export interface Collection {
    drop(): Promise<MongoResult>;
    rename(newName: string, options?: object): Promise<MongoResult>;
    createIndex(field: string | object, options?: object): Promise<MongoResult>;
    createIndexes(fields: Array<string | object>, options?: object): Promise<MongoResult>;
    listIndexes(options?: object): Promise<MongoResult>;
    dropIndex(indexName: string, options?: object): Promise<MongoResult>;
    dropIndexes(options?: object): Promise<MongoResult>;
    insertOne(doc: object, options?: object): Promise<MongoResult>;
    insertMany(docs: object[], options?: object): Promise<MongoResult>;
    find(query?: object, options?: object): Promise<MongoResult>;
    findOne(query: object, options?: object): Promise<MongoResult>;
    findOneAndUpdate(filter: object, update: object, options?: object): Promise<MongoResult>;
    findOneAndDelete(filter: object, options?: object): Promise<MongoResult>;
    findOneAndReplace(filter: object, update: object, options?: object): Promise<MongoResult>;
    updateOne(filter: object, update: object, options?: object): Promise<MongoResult>;
    updateMany(filter: object, update: object, options?: object): Promise<MongoResult>;
    replaceOne(doc: object, filter: object, options?: object): Promise<MongoResult>;
    deleteOne(filter: object, options?: object): Promise<MongoResult>;
    deleteMany(filter: object, options?: object): Promise<MongoResult>;
    count(query: object, options?: object): Promise<MongoResult>;
    distinct(key: string, query: object, options?: object): Promise<MongoResult>;
    aggregate(pipeline: object | object[], options?: object): Promise<MongoResult>;
}
