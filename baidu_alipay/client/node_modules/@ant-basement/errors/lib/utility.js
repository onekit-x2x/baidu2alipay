"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const parameter_1 = tslib_1.__importDefault(require("parameter"));
const request_1 = require("./errors/request");
function extractMessage(e) {
    if (!e) {
        return;
    }
    if (e instanceof Error) {
        return e.message;
    }
    else if (Array.isArray(e)) {
        return e.map(extractMessage).join('; ');
    }
    else if (typeof e === 'object') {
        return e && (e.message || e.msg || e.desc);
    }
    else if (typeof e === 'string') {
        return e;
    }
}
exports.extractMessage = extractMessage;
class Validator extends parameter_1.default {
    addRule(name, validator) {
        super.addRule(name, validator);
    }
    validate(rules, obj) {
        if (typeof obj !== 'object' && typeof rules === 'string') {
            obj = { field: obj };
            rules = { field: rules };
        }
        const message = super.validate(rules, obj);
        if (!message) {
            return;
        }
        const result = message.map((mistake) => {
            if (mistake.field) {
                let target = JSON.parse(JSON.stringify(obj));
                const fields = mistake.field.match(/[^\.\[\]]+/g);
                while (fields.length) {
                    const field = fields.shift();
                    if (!target.hasOwnProperty(field)) {
                        break;
                    }
                    target = target[field];
                }
                mistake.value = target;
            }
            return mistake;
        });
        function getMessage(result) {
            if (Array.isArray(result)) {
                return result.map(getMessage).join('; ');
            }
            return `${result.field} ${result.message}`;
        }
        throw new request_1.ValidationError(getMessage(result), result);
    }
}
exports.Validator = Validator;
;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoidXRpbGl0eS5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uL3NyYy91dGlsaXR5LnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUFBLGtFQUFrQztBQUNsQyw4Q0FBbUQ7QUFNbkQsU0FBZ0IsY0FBYyxDQUFDLENBQU87SUFDcEMsSUFBSSxDQUFDLENBQUMsRUFBRTtRQUNOLE9BQU87S0FDUjtJQUVELElBQUksQ0FBQyxZQUFZLEtBQUssRUFBRTtRQUN0QixPQUFPLENBQUMsQ0FBQyxPQUFPLENBQUM7S0FDbEI7U0FBTSxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUMsQ0FBQyxDQUFDLEVBQUU7UUFDM0IsT0FBTyxDQUFDLENBQUMsR0FBRyxDQUFDLGNBQWMsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUN6QztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLE9BQU8sSUFBSSxDQUFDLENBQUMsR0FBRyxJQUFJLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQztLQUM1QztTQUFNLElBQUksT0FBTyxDQUFDLEtBQUssUUFBUSxFQUFFO1FBQ2hDLE9BQU8sQ0FBQyxDQUFDO0tBQ1Y7QUFDSCxDQUFDO0FBZEQsd0NBY0M7QUFFRCxNQUFhLFNBQVUsU0FBUSxtQkFBUztJQUsvQixPQUFPLENBQUMsSUFBWSxFQUFFLFNBQWdEO1FBQzNFLEtBQUssQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLFNBQVMsQ0FBQyxDQUFDO0lBQ2pDLENBQUM7SUFFTSxRQUFRLENBQUMsS0FBSyxFQUFFLEdBQUc7UUFFeEIsSUFBSSxPQUFPLEdBQUcsS0FBSyxRQUFRLElBQUksT0FBTyxLQUFLLEtBQUssUUFBUSxFQUFFO1lBQ3hELEdBQUcsR0FBRyxFQUFFLEtBQUssRUFBRSxHQUFHLEVBQUUsQ0FBQztZQUNyQixLQUFLLEdBQUcsRUFBRSxLQUFLLEVBQUUsS0FBSyxFQUFFLENBQUM7U0FDMUI7UUFFRCxNQUFNLE9BQU8sR0FBRyxLQUFLLENBQUMsUUFBUSxDQUFDLEtBQUssRUFBRSxHQUFHLENBQUMsQ0FBQztRQUUzQyxJQUFJLENBQUMsT0FBTyxFQUFFO1lBQ1osT0FBTztTQUNSO1FBR0QsTUFBTSxNQUFNLEdBQUcsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLE9BQU8sRUFBRSxFQUFFO1lBQ3JDLElBQUksT0FBTyxDQUFDLEtBQUssRUFBRTtnQkFDakIsSUFBSSxNQUFNLEdBQUcsSUFBSSxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsU0FBUyxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUM7Z0JBQzdDLE1BQU0sTUFBTSxHQUFHLE9BQU8sQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLGFBQWEsQ0FBQyxDQUFDO2dCQUVsRCxPQUFPLE1BQU0sQ0FBQyxNQUFNLEVBQUU7b0JBQ3BCLE1BQU0sS0FBSyxHQUFHLE1BQU0sQ0FBQyxLQUFLLEVBQUUsQ0FBQztvQkFDN0IsSUFBSSxDQUFDLE1BQU0sQ0FBQyxjQUFjLENBQUMsS0FBSyxDQUFDLEVBQUU7d0JBQ2pDLE1BQU07cUJBQ1A7b0JBRUQsTUFBTSxHQUFHLE1BQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQztpQkFDeEI7Z0JBRUQsT0FBTyxDQUFDLEtBQUssR0FBRyxNQUFNLENBQUM7YUFDeEI7WUFFRCxPQUFPLE9BQU8sQ0FBQztRQUNqQixDQUFDLENBQUMsQ0FBQztRQUVILFNBQVMsVUFBVSxDQUFDLE1BQU07WUFDeEIsSUFBSSxLQUFLLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxFQUFFO2dCQUN6QixPQUFPLE1BQU0sQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO2FBQzFDO1lBRUQsT0FBTyxHQUFHLE1BQU0sQ0FBQyxLQUFLLElBQUksTUFBTSxDQUFDLE9BQU8sRUFBRSxDQUFDO1FBQzdDLENBQUM7UUFFRCxNQUFNLElBQUkseUJBQWUsQ0FBQyxVQUFVLENBQUMsTUFBTSxDQUFDLEVBQUUsTUFBTSxDQUFDLENBQUM7SUFDeEQsQ0FBQztDQUNGO0FBckRELDhCQXFEQztBQUFBLENBQUMifQ==